// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodDelivery.Repository.Migrations.PawPrintDbcontextMigrations
{
    [DbContext(typeof(PawPrintDbcontext))]
    [Migration("20250207193908_initialpawprints")]
    partial class initialpawprints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "approval_status", new[] { "approved", "denied", "pending" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "consumer", "admin" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.AdopterPetGenderPreference", b =>
                {
                    b.Property<Guid>("AdopterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("AdopterId", "GenderId");

                    b.HasIndex("GenderId");

                    b.ToTable("adopter_pet_gender_preferences", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.AdopterPetSizePreference", b =>
                {
                    b.Property<Guid>("AdopterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("AdopterId", "SizeId");

                    b.HasIndex("SizeId");

                    b.ToTable("adopter_pet_sizes_preferences", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.AdopterPetTypePreference", b =>
                {
                    b.Property<Guid>("AdopterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("AdopterId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("adopter_pet_type_preferences", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.Adoption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdopterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AdoptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("AdoptionFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CounselorNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdopterId");

                    b.HasIndex("PetId");

                    b.ToTable("adoptions", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.AdoptionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("adoption_statuses", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.HealthStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("health_statuses", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.MedicalCondition", b =>
                {
                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConditionName")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MedicalRecordId", "ConditionName");

                    b.ToTable("medical_conditions", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastMedicalCheckup")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MicrochipNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SpayNeuterStatus")
                        .HasColumnType("boolean");

                    b.Property<Guid>("VetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VetId");

                    b.ToTable("medical_records", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.OwnerPetListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdopterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SurrenderReasonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdopterId");

                    b.HasIndex("PetId");

                    b.HasIndex("SurrenderReasonId");

                    b.ToTable("owner_pet_listings", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.OwnerPetListingDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("owner_pet_listing_documents", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AdoptionStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("adoption_status_id");

                    b.Property<int>("AgeYears")
                        .HasColumnType("integer")
                        .HasColumnName("age_years");

                    b.Property<string>("AvatarImg")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_img");

                    b.Property<string>("BehavioralNotes")
                        .HasColumnType("text")
                        .HasColumnName("behaviorial_notes");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("breed");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EnergyLevel")
                        .HasColumnType("integer")
                        .HasColumnName("energy_level");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("gender_id");

                    b.Property<bool>("GoodWithCats")
                        .HasColumnType("boolean")
                        .HasColumnName("good_with_cats");

                    b.Property<bool>("GoodWithChildren")
                        .HasColumnType("boolean")
                        .HasColumnName("good_with_children");

                    b.Property<bool>("GoodWithDogs")
                        .HasColumnType("boolean")
                        .HasColumnName("good_with_dogs");

                    b.Property<Guid>("HealthStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("health_status_id");

                    b.Property<List<string>>("ImageShowcase")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("image_showcase");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("size_id");

                    b.Property<string>("SpecialRequirements")
                        .HasColumnType("text")
                        .HasColumnName("special_requirements");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("AdoptionStatusId");

                    b.HasIndex("GenderId");

                    b.HasIndex("HealthStatusId");

                    b.HasIndex("SizeId");

                    b.HasIndex("TypeId");

                    b.ToTable("pets", "public", t =>
                        {
                            t.HasCheckConstraint("CK_Pet_EnergyLevel", "\"EnergyLevel\" BETWEEN 1 AND 5");
                        });
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.PetGender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("pet_genders", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.PetSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("pet_sizes", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.PetType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("pet_types", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.Shelter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsNoKill")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("shelters", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.ShelterPetListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Approved")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IntakeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShelterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("PetId");

                    b.HasIndex("ShelterId");

                    b.ToTable("shelter_pet_listing", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.SurrenderReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("surrender_reasons", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasChildren")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOtherPets")
                        .HasColumnType("boolean");

                    b.Property<string>("HomeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastAnme");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.Vaccination", b =>
                {
                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("VaccineName")
                        .HasColumnType("text");

                    b.Property<DateTime>("VaccinationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("MedicalRecordId", "VaccineName", "VaccinationDate");

                    b.ToTable("vaccinations", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.VetSpecialization", b =>
                {
                    b.Property<Guid>("VetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Specialization")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("VetId", "Specialization");

                    b.ToTable("vet_specializations", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.Veterinarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("veterinarians", "public");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.AdopterPetGenderPreference", b =>
                {
                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.User", "User")
                        .WithMany()
                        .HasForeignKey("AdopterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.PetGender", "PetGender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetGender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.AdopterPetSizePreference", b =>
                {
                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.User", "User")
                        .WithMany()
                        .HasForeignKey("AdopterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.PetSize", "PetSize")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetSize");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.AdopterPetTypePreference", b =>
                {
                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.User", "User")
                        .WithMany()
                        .HasForeignKey("AdopterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.PetType", "PetType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.Adoption", b =>
                {
                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.User", "User")
                        .WithMany()
                        .HasForeignKey("AdopterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.MedicalCondition", b =>
                {
                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.MedicalRecord", b =>
                {
                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.Veterinarian", "Veterinarian")
                        .WithMany()
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.OwnerPetListing", b =>
                {
                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.User", "User")
                        .WithMany()
                        .HasForeignKey("AdopterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.SurrenderReason", "SurrenderReason")
                        .WithMany()
                        .HasForeignKey("SurrenderReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("SurrenderReason");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.OwnerPetListingDocument", b =>
                {
                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.OwnerPetListing", "OwnerPetListing")
                        .WithMany()
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerPetListing");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.Pet", b =>
                {
                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.AdoptionStatus", "AdoptionStatus")
                        .WithMany()
                        .HasForeignKey("AdoptionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.PetGender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.HealthStatus", "HealthStatus")
                        .WithMany()
                        .HasForeignKey("HealthStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.PetSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.PetType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdoptionStatus");

                    b.Navigation("Gender");

                    b.Navigation("HealthStatus");

                    b.Navigation("Size");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.ShelterPetListing", b =>
                {
                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId");

                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.Shelter", "Shelter")
                        .WithMany()
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");

                    b.Navigation("Pet");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.Vaccination", b =>
                {
                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("FoodDelivery.Domain.DomainModels.PawPrintModels.VetSpecialization", b =>
                {
                    b.HasOne("FoodDelivery.Domain.DomainModels.PawPrintModels.Veterinarian", "Veterinarian")
                        .WithMany()
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Veterinarian");
                });
#pragma warning restore 612, 618
        }
    }
}
